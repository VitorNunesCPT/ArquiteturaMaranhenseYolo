# Ultralytics üöÄ AGPL-3.0 License - https://ultralytics.com/license

import io
import os
import sys
from typing import Any
import warnings

# Suprimir avisos n√£o cr√≠ticos
warnings.filterwarnings('ignore')
os.environ['STREAMLIT_BROWSER_GATHER_USAGE_STATS'] = "false"

import cv2
from ultralytics import YOLO
from ultralytics.utils import LOGGER
from ultralytics.utils.checks import check_requirements
from ultralytics.utils.downloads import GITHUB_ASSETS_STEMS


class Inference:
    """
    A class to perform object detection, image classification, image segmentation and pose estimation inference using
    Streamlit and Ultralytics YOLO models. It provides the functionalities such as loading models, configuring settings,
    uploading video files, and performing real-time inference.

    Attributes:
        st (module): Streamlit module for UI creation.
        temp_dict (dict): Temporary dictionary to store the model path.
        model_path (str): Path to the loaded model.
        model (YOLO): The YOLO model instance.
        source (str): Selected video source.
        enable_trk (str): Enable tracking option.
        conf (float): Confidence threshold.
        iou (float): IoU threshold for non-max suppression.
        vid_file_name (str): Name of the uploaded video file.
        selected_ind (list): List of selected class indices.

    Methods:
        web_ui: Sets up the Streamlit web interface with custom HTML elements.
        sidebar: Configures the Streamlit sidebar for model and inference settings.
        source_upload: Handles video file uploads through the Streamlit interface.
        configure: Configures the model and loads selected classes for inference.
        inference: Performs real-time object detection inference.

    Examples:
        >>> inf = solutions.Inference(model="path/to/model.pt")  # Model is not necessary argument.
        >>> inf.inference()
    """

    def __init__(self, **kwargs: Any):
        """Inicializa a classe Inference."""
        check_requirements("streamlit>=1.29.0")
        import streamlit as st
        
        self.st = st
        self.source = None
        self.enable_trk = False
        self.conf = 0.25
        self.iou = 0.45
        self.org_frame = None
        self.ann_frame = None
        self.vid_file_name = None
        self.selected_ind = []
        self.model = None

        self.temp_dict = {"model": None, **kwargs}
        self.model_path = None
        if self.temp_dict["model"] is not None:
            self.model_path = self.temp_dict["model"]

        LOGGER.info(f"Ultralytics Solutions: ‚úÖ {self.temp_dict}")

    def web_ui(self):
        """Configura a interface web Streamlit."""
        # Configura√ß√£o da p√°gina deve ser a primeira chamada Streamlit
        self.st.set_page_config(
            page_title="Detector Arquitetura MA", 
            layout="wide",
            initial_sidebar_state="expanded",
            menu_items={
                'Get Help': None,
                'Report a bug': None,
                'About': None
            }
        )
        
        # Esconder elementos da interface que podem causar warnings
        hide_elements = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            .stDeployButton {display:none;}
            </style>
        """
        self.st.markdown(hide_elements, unsafe_allow_html=True)

        # T√≠tulo personalizado
        main_title_cfg = """<div><h1 style="color:#FF64DA; text-align:center; font-size:40px;
        font-family: 'Archivo', sans-serif; margin-bottom:20px;">Detector de Arquitetura Maranhense</h1></div>"""

        # Subt√≠tulo personalizado
        sub_title_cfg = """<div><h4 style="color:#042AFF; text-align:center; font-family: 'Archivo', sans-serif; 
        margin-bottom:50px;">Detec√ß√£o de elementos arquitet√¥nicos maranhenses em tempo real</h4></div>"""
        
        self.st.markdown(main_title_cfg, unsafe_allow_html=True)
        self.st.markdown(sub_title_cfg, unsafe_allow_html=True)

    def sidebar(self):
        """Configura a barra lateral do Streamlit."""
        with self.st.sidebar:
            self.st.title("Configura√ß√µes")
            
            # Se√ß√£o de sele√ß√£o da fonte de v√≠deo
            self.source = self.st.selectbox(
                "Fonte do V√≠deo",
                ("webcam", "video"),
            )
            
            # Op√ß√£o de tracking
            self.enable_trk = self.st.radio("Habilitar Tracking", ("Sim", "N√£o"))
            
            # Ajuste de par√¢metros
            self.conf = float(
                self.st.slider("Limiar de Confian√ßa", 0.0, 1.0, self.conf, 0.01)
            )
            self.iou = float(
                self.st.slider("Limiar IoU", 0.0, 1.0, self.iou, 0.01)
            )

        # Criar colunas para os frames
        col1, col2 = self.st.columns(2)
        with col1:
            self.st.markdown("### V√≠deo Original")
            self.org_frame = self.st.empty()
        with col2:
            self.st.markdown("### Detec√ß√µes")
            self.ann_frame = self.st.empty()

    def source_upload(self):
        """Gerencia o upload de v√≠deo e configura√ß√£o da webcam."""
        self.vid_file_name = None  # Inicializa como None
        
        if self.source == "video":
            # Upload de v√≠deo
            vid_file = self.st.sidebar.file_uploader(
                "Carregar V√≠deo", 
                type=["mp4", "mov", "avi", "mkv"]
            )
            if vid_file is not None:
                # Salvar o v√≠deo temporariamente
                temp_file = "temp_video.mp4"
                with open(temp_file, "wb") as f:
                    f.write(vid_file.read())
                self.vid_file_name = temp_file
                self.st.sidebar.success(f"V√≠deo carregado: {vid_file.name}")
        
        elif self.source == "webcam":
            self.vid_file_name = 0  # 0 √© o √≠ndice da webcam padr√£o
            self.st.sidebar.info("Webcam selecionada")

    def configure(self):
        """Configura o modelo e carrega as classes selecionadas para infer√™ncia."""
        def find_model_path():
            """Procura o arquivo de peso do modelo nos caminhos poss√≠veis."""
            possible_paths = [
                "train3/weights/best.pt",
                "runs/detect/train3/weights/best.pt",
                "runs/train3/weights/best.pt",
                "./train3/weights/best.pt",
                "../train3/weights/best.pt"
            ]
            
            for path in possible_paths:
                if os.path.exists(path):
                    return path
                
            raise FileNotFoundError(
                "Arquivo de peso n√£o encontrado! Procurei em: \n" + 
                "\n".join(possible_paths)
            )

        with self.st.spinner("Carregando modelo..."):
            try:
                model_path = find_model_path()
                self.st.info(f"Modelo encontrado em: {model_path}")
                self.model = YOLO(model_path)
                class_names = list(self.model.names.values())
                self.st.success("Modelo carregado com sucesso!")
            except Exception as e:
                self.st.error(f"Erro ao carregar modelo: {str(e)}")
                self.st.error("Por favor, verifique se o arquivo best.pt existe em train3/weights/")
                sys.exit(1)

        # Multiselect com os nomes das suas classes
        selected_classes = self.st.sidebar.multiselect("Classes", class_names, default=class_names)
        self.selected_ind = [class_names.index(option) for option in selected_classes]

        if not isinstance(self.selected_ind, list):
            self.selected_ind = list(self.selected_ind)

    def inference(self):
        """Realiza infer√™ncia em tempo real."""
        self.web_ui()
        self.sidebar()
        self.source_upload()
        self.configure()

        start_button = self.st.sidebar.button("Iniciar")
        
        if start_button:
            try:
                # Tentar abrir a fonte de v√≠deo
                if self.vid_file_name is None:
                    self.st.error("Por favor, selecione uma fonte de v√≠deo (webcam ou arquivo)")
                    return
                    
                cap = cv2.VideoCapture(self.vid_file_name)
                
                if not cap.isOpened():
                    self.st.error(
                        "Erro ao abrir fonte de v√≠deo. " +
                        "Se for webcam, verifique se est√° conectada. " +
                        "Se for arquivo, verifique se √© um formato v√°lido."
                    )
                    return

                # Criar bot√£o de parar
                stop_button = self.st.button("Parar")
                self.st.info("Processando... Clique em 'Parar' para encerrar.")

                while cap.isOpened():
                    ret, frame = cap.read()
                    if not ret:
                        self.st.warning("N√£o foi poss√≠vel ler o pr√≥ximo frame.")
                        break

                    # Fazer predi√ß√µes
                    if self.enable_trk == "Sim":
                        results = self.model.track(
                            frame, 
                            conf=self.conf, 
                            iou=self.iou,
                            classes=self.selected_ind,
                            persist=True
                        )
                    else:
                        results = self.model(
                            frame,
                            conf=self.conf,
                            iou=self.iou,
                            classes=self.selected_ind
                        )

                    # Plotar resultados
                    annotated_frame = results[0].plot()

                    # Mostrar frames
                    self.org_frame.image(frame, channels="BGR", caption="V√≠deo Original")
                    self.ann_frame.image(annotated_frame, channels="BGR", caption="Detec√ß√µes")

                    if stop_button:
                        break

                # Limpar recursos
                cap.release()
                self.st.success("Detec√ß√£o finalizada!")
                
            except Exception as e:
                self.st.error(f"Erro durante a execu√ß√£o: {str(e)}")
                if 'cap' in locals():
                    cap.release()
            
            finally:
                # Remover arquivo tempor√°rio se existir
                if self.source == "video" and self.vid_file_name:
                    try:
                        os.remove(self.vid_file_name)
                    except:
                        pass


if __name__ == "__main__":
    # Simplificar a execu√ß√£o
    import sys
    args = len(sys.argv)
    model = sys.argv[1] if args > 1 else None
    Inference(model=model).inference()
